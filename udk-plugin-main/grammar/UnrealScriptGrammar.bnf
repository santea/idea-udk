{
  parserClass="org.octopussy.udkplugin.lang.parser.UnrealParser"
  stubParserClass="org.octopussy.udkplugin.lang.parser.UnrealScriptParserUtil"

  psiClassPrefix="UnrealScript"
  psiImplClassSuffix="Impl"
  psiPackage="org.octopussy.udkplugin.lang.psi"
  psiImplPackage="org.octopussy.udkplugin.lang.psi.impl"

  implements="org.octopussy.udkplugin.lang.psi.api.UnrealPsiElement"
  extends="org.octopussy.udkplugin.lang.psi.impl.UnrealPsiElementImpl"

  elementTypeClass="org.octopussy.udkplugin.lang.UnrealElementType"
  tokenTypeClass="org.octopussy.udkplugin.lang.psi.UnrealScriptTokenType"
  elementTypeHolderClass="org.octopussy.udkplugin.lang.psi.UnrealScriptTypes"

  elementTypePrefix="US_"


  // make class hierarchy nice and AST tree short
  extends(".*expression")="expression"
  // make expressions stable enough
  pin(".*expression")=1

  // tokens beyond id, number and string
  ADD='+'
  MUL='*'
  DOT='.'
}
root ::= expression *
keywords ::= true | false

literal_expression ::= number | string
/*private recover ::= !(number | string | id)

expression ::= factor add_expression * {recoverUntil="recover"}
private factor ::= primary mul_expression *
private primary ::= literal_expression | reference_expression qreference_expression *

left add_expression ::= '+' factor
left mul_expression ::= '*' primary

identifier ::= id
reference_expression ::= identifier {mixin="mypackage.MyReferenceExpressionImpl"}
left qreference_expression ::= '.' identifier {elementType="reference_expression"}

*/

