/* The following code was generated by JFlex 1.4.3 on 09.04.12 2:04 */

package com.octopussy.udkplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09.04.12 2:04 from the specification file
 * <tt>E:/udk-plugin/udk-plugin-main/src/com/octopussy/udkplugin/lexer/unrealscript.flex</tt>
 */
public class _UnrealScriptLexer implements FlexLexer, TokenType, UnrealScriptTokens {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\26\1\0\1\1\1\6\16\3\4\0\1\1\1\0"+
    "\1\31\1\0\1\2\2\0\1\27\2\0\1\5\1\24\1\0\1\24"+
    "\1\22\1\4\1\14\1\13\6\11\2\7\7\0\1\12\1\16\1\12"+
    "\1\21\1\23\1\20\5\2\1\17\1\2\1\42\1\2\1\25\7\2"+
    "\1\15\2\2\1\0\1\30\2\0\1\10\1\0\1\37\1\46\1\50"+
    "\1\52\1\35\1\36\1\53\1\56\1\51\1\2\1\47\1\40\1\57"+
    "\1\44\1\43\1\55\1\2\1\33\1\41\1\32\1\34\1\45\1\54"+
    "\1\60\2\2\4\0\41\3\2\0\4\2\4\0\1\2\2\0\1\3"+
    "\7\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2"+
    "\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\3"+
    "\5\0\23\3\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2"+
    "\1\0\4\3\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2"+
    "\41\0\46\2\2\0\1\2\7\0\47\2\11\0\21\3\1\0\27\3"+
    "\1\0\3\3\1\0\1\3\1\0\2\3\1\0\1\3\13\0\33\2"+
    "\5\0\3\2\15\0\4\3\14\0\6\3\13\0\32\2\5\0\13\2"+
    "\16\3\7\0\12\3\4\0\2\2\1\3\143\2\1\0\1\2\10\3"+
    "\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2\2\0"+
    "\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\3\2\60\0"+
    "\46\2\13\3\1\2\u014f\0\3\3\66\2\2\0\1\3\1\2\20\3"+
    "\2\0\1\2\4\3\3\0\12\2\2\3\2\0\12\3\21\0\3\3"+
    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2"+
    "\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3"+
    "\11\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2"+
    "\15\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3"+
    "\4\0\2\3\2\0\3\3\13\0\4\2\1\0\1\2\7\0\14\3"+
    "\3\2\14\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3\1\0"+
    "\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0\12\3"+
    "\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\6\3"+
    "\3\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0\3\2"+
    "\4\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0"+
    "\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0"+
    "\2\2\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\11\0\1\3\17\0\11\3\11\0\1\2\7\0"+
    "\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\4\0\7\3\1\0\3\3\1\0\4\3\7\0\2\3\11\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2\4\0"+
    "\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\20\2\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3\10\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\22\2\3\0\30\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0"+
    "\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3"+
    "\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0"+
    "\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3"+
    "\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0"+
    "\6\3\2\0\12\3\2\0\2\2\42\0\1\2\27\0\2\3\6\0"+
    "\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2"+
    "\1\0\42\2\6\0\24\3\1\0\2\3\4\2\4\0\10\3\1\0"+
    "\44\3\11\0\1\3\71\0\42\2\1\0\5\2\1\0\2\2\1\0"+
    "\7\3\3\0\4\3\6\0\12\3\6\0\6\2\4\3\106\0\46\2"+
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2"+
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3"+
    "\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2"+
    "\3\0\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3"+
    "\13\0\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0"+
    "\64\2\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0"+
    "\3\3\2\0\12\3\6\0\130\2\10\0\51\2\1\3\126\0\35\2"+
    "\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2\u038b\0"+
    "\154\2\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0"+
    "\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0"+
    "\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0"+
    "\3\2\1\0\7\2\17\0\4\3\32\0\5\3\20\0\2\2\23\0"+
    "\1\2\13\0\4\3\6\0\6\3\1\0\1\2\15\0\1\2\40\0"+
    "\22\2\36\0\15\3\4\0\1\3\3\0\6\3\27\0\1\2\4\0"+
    "\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0"+
    "\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\3"+
    "\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2"+
    "\1\0\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2"+
    "\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2"+
    "\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2"+
    "\3\0\20\3\20\0\4\3\17\0\2\2\30\0\3\2\31\0\1\2"+
    "\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3"+
    "\7\0\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2"+
    "\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2"+
    "\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\2\4\1\1\1\5"+
    "\1\6\17\3\1\7\1\10\1\0\1\11\1\12\3\13"+
    "\2\0\3\4\1\13\2\5\2\6\25\3\1\14\2\3"+
    "\1\15\4\3\1\10\1\16\2\13\2\0\1\4\1\11"+
    "\1\0\1\4\1\0\6\3\1\17\5\3\1\20\1\3"+
    "\1\21\6\3\1\22\6\3\1\0\2\16\4\0\1\13"+
    "\2\0\1\23\1\3\1\24\5\3\1\25\1\3\1\26"+
    "\1\3\1\27\1\3\1\30\1\31\4\3\1\32\4\3"+
    "\1\10\4\0\1\12\1\13\2\3\1\33\1\34\1\3"+
    "\1\35\2\3\1\36\1\37\3\3\1\40\3\3\1\41"+
    "\1\3\1\42\1\43\1\44\5\3\1\45\1\46\4\3"+
    "\1\47\1\50\3\3\1\51\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\61\0\61\0\61\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\61"+
    "\0\u06e4\0\u0715\0\61\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\223\0\u0b4b\0\u0b7c\0\223\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0d66"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\223\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\223"+
    "\0\u1076\0\223\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324"+
    "\0\u1355\0\61\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\223\0\u14dd\0\223\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\223\0\u1603\0\223\0\u1634\0\223\0\u1665\0\223"+
    "\0\223\0\u1696\0\u16c7\0\u16f8\0\u1729\0\223\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\61\0\u181e\0\u184f\0\u1880\0\u18b1\0\u13b7"+
    "\0\u13b7\0\u18e2\0\u1913\0\223\0\223\0\u1944\0\223\0\u1975"+
    "\0\u19a6\0\223\0\223\0\u19d7\0\u1a08\0\u1a39\0\223\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\223\0\u1afd\0\223\0\223\0\223\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\223\0\223\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\223\0\223\0\u1ce7\0\u1d18\0\u1d49\0\223"+
    "\0\223\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\3\1\6"+
    "\1\4\1\6\1\4\1\6\1\7\5\4\1\10\1\4"+
    "\1\2\1\4\1\3\1\11\1\2\1\12\1\13\1\14"+
    "\1\4\1\15\1\16\2\4\1\17\1\20\1\4\1\21"+
    "\1\22\1\23\1\4\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\4\62\0\1\3\4\0\1\3\17\0\1\3"+
    "\34\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\27\4\4\0\1\32\1\33\62\0\1\6\1\34"+
    "\1\6\1\0\2\6\2\0\1\35\1\36\1\37\1\40"+
    "\1\41\11\0\1\41\1\36\1\0\1\35\11\0\1\37"+
    "\15\0\1\42\1\43\1\44\1\0\2\44\1\45\1\46"+
    "\1\35\1\36\1\37\1\40\1\41\11\0\1\41\1\36"+
    "\1\0\1\35\5\0\1\46\3\0\1\37\5\0\1\45"+
    "\7\0\1\47\1\0\1\47\1\0\2\47\44\0\6\11"+
    "\1\0\17\11\1\0\1\50\1\51\30\11\6\12\1\0"+
    "\17\12\1\0\1\12\1\52\1\53\27\12\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\54\25\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\55\23\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\56\17\4\1\57\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\60\1\61\2\4"+
    "\1\62\15\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\63\1\4\1\64\2\4\1\65"+
    "\14\4\1\66\4\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\11\4\1\67\15\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\70\1\4\1\71\21\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\5\4\1\72"+
    "\3\4\1\73\15\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\74\7\4\1\75"+
    "\15\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\5\4\1\76\1\77\2\4\1\100\15\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\4\4\1\101\5\4\1\102\14\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\103\5\4\1\104\15\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\11\4\1\105\15\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\24\4\1\106\2\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\107\1\110"+
    "\24\4\6\32\1\0\17\32\1\0\32\32\5\111\1\112"+
    "\53\111\7\0\1\6\1\34\1\6\1\0\2\6\53\0"+
    "\1\47\1\0\1\47\1\0\2\47\3\0\1\36\1\37"+
    "\1\0\1\41\11\0\1\41\1\36\13\0\1\37\15\0"+
    "\1\113\1\0\1\113\1\0\2\113\3\0\1\36\1\37"+
    "\2\0\1\114\11\0\1\36\13\0\1\37\15\0\1\42"+
    "\1\115\1\42\1\0\2\42\3\0\1\36\1\37\1\40"+
    "\1\41\11\0\1\41\1\36\13\0\1\37\15\0\1\42"+
    "\1\43\1\44\1\0\2\44\53\0\1\42\1\43\1\44"+
    "\1\0\2\44\2\0\1\35\1\36\1\37\1\40\1\41"+
    "\11\0\1\41\1\36\1\0\1\35\11\0\1\37\6\0"+
    "\7\116\1\117\1\116\4\117\1\116\1\117\1\120\2\117"+
    "\1\116\1\117\1\116\1\121\1\0\6\116\3\117\1\120"+
    "\5\116\1\117\1\116\1\117\1\116\1\117\2\116\1\121"+
    "\3\116\13\0\2\122\2\0\1\35\20\0\1\35\27\0"+
    "\1\47\1\123\1\47\1\0\2\47\3\0\1\36\1\37"+
    "\1\0\1\41\11\0\1\41\1\36\13\0\1\37\6\0"+
    "\6\11\1\0\17\11\1\0\32\11\6\12\1\0\17\12"+
    "\1\0\32\12\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\1\124\24\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\125"+
    "\26\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\7\4\1\126\17\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\127\26\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\130\20\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\11\4\1\131\15\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\4\1\132\25\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\133\21\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\23\4\1\134\3\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\25\4\1\135\1\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\17\4\1\136\7\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\12\4\1\137\14\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\22\4\1\140\4\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\141\26\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\4\1\142\25\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\17\4\1\143\7\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\144\23\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\11\4\1\145\15\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\7\4\1\146\17\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\147\21\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\12\4\1\150\14\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\151\26\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\23\4"+
    "\1\152\3\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\153\26\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\17\4\1\154"+
    "\7\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\11\4\1\155\5\4\1\156\7\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\14\4\1\157\12\4\5\111\1\160\53\111\4\161\1\162"+
    "\1\112\53\161\7\0\1\113\1\163\1\113\1\0\2\113"+
    "\3\0\1\36\1\37\14\0\1\36\13\0\1\37\15\0"+
    "\1\113\1\0\1\113\1\0\2\113\3\0\1\36\1\37"+
    "\14\0\1\36\13\0\1\37\15\0\1\42\1\115\1\42"+
    "\1\0\2\42\53\0\1\164\1\0\4\164\1\0\1\164"+
    "\1\0\2\164\1\0\1\164\1\0\1\165\7\0\3\164"+
    "\6\0\1\164\1\0\1\164\1\0\1\164\2\0\1\165"+
    "\3\0\7\116\1\117\1\166\4\117\1\116\1\117\1\120"+
    "\2\117\1\116\1\117\1\116\1\121\1\0\6\116\3\117"+
    "\1\120\5\116\1\117\1\116\1\117\1\116\1\117\2\116"+
    "\1\121\3\116\7\0\1\167\1\0\1\167\1\164\2\167"+
    "\1\0\1\164\1\0\2\164\1\0\1\164\1\170\1\165"+
    "\7\0\3\164\6\0\1\164\1\0\1\164\1\0\1\164"+
    "\2\0\1\165\13\0\1\171\2\0\2\122\2\0\1\35"+
    "\20\0\1\35\27\0\1\47\1\123\1\47\1\0\2\47"+
    "\46\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\172\23\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\173\24\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\3\4\1\174\23\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\3\4\1\175\23\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\176\17\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\177\21\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\200\26\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\201\23\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\202\23\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\203\26\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\204\23\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\17\4\1\205\7\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\20\4"+
    "\1\206\6\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\207\21\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\210\20\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\3\4\1\211\23\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\7\4"+
    "\1\212\17\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\213\26\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\3\4\1\214"+
    "\23\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\3\4\1\215\23\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\11\4\1\216"+
    "\15\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\217\20\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\220\26\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\13\4\1\221\13\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\222\20\4"+
    "\4\111\1\223\1\160\53\111\5\161\1\224\53\161\7\0"+
    "\1\113\1\163\1\113\1\0\2\113\53\0\1\164\1\225"+
    "\4\164\1\0\1\164\1\0\2\164\1\0\1\164\1\0"+
    "\1\165\7\0\3\164\6\0\1\164\1\0\1\164\1\0"+
    "\1\164\2\0\1\165\12\0\1\113\1\0\1\113\1\0"+
    "\2\113\7\0\1\170\43\0\1\117\1\226\4\117\1\0"+
    "\1\117\1\0\2\117\1\0\1\117\1\0\1\165\7\0"+
    "\3\117\6\0\1\117\1\0\1\117\1\0\1\117\2\0"+
    "\1\165\12\0\1\167\1\227\1\167\1\164\2\167\1\0"+
    "\1\164\1\0\1\230\1\231\1\0\1\164\1\0\1\165"+
    "\7\0\1\164\1\230\1\164\6\0\1\164\1\0\1\164"+
    "\1\0\1\231\2\0\1\165\12\0\1\113\1\0\1\113"+
    "\1\0\2\113\54\0\1\171\2\0\2\122\46\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\1\4"+
    "\1\232\25\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\12\4\1\233\14\4\2\0\2\4"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\3\4"+
    "\1\234\23\4\2\0\2\4\3\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\235\26\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\17\4\1\236"+
    "\7\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\4\1\237\25\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\16\4\1\240"+
    "\10\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\13\4\1\241\13\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\15\4\1\242"+
    "\11\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\7\4\1\243\17\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\17\4\1\244"+
    "\7\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\4\1\245\25\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\12\4\1\246"+
    "\14\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\3\4\1\247\23\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\3\4\1\250"+
    "\23\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\5\4\1\251\21\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\17\4\1\252"+
    "\7\4\4\161\1\162\1\224\53\161\7\0\1\164\1\225"+
    "\4\164\1\0\1\164\1\0\2\164\1\0\1\164\11\0"+
    "\3\164\6\0\1\164\1\0\1\164\1\0\1\164\15\0"+
    "\1\117\1\226\4\117\1\0\1\117\1\0\2\117\1\0"+
    "\1\117\11\0\3\117\6\0\1\117\1\0\1\117\1\0"+
    "\1\117\15\0\1\167\1\227\1\167\1\164\2\167\1\0"+
    "\1\164\1\0\2\164\1\0\1\164\11\0\3\164\6\0"+
    "\1\164\1\0\1\164\1\0\1\164\10\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\12\4\1\253"+
    "\14\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\20\4\1\254\6\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\16\4\1\255"+
    "\10\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\24\4\1\256\2\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\3\4\1\257"+
    "\23\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\12\4\1\260\14\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\4\4\1\261"+
    "\22\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\20\4\1\262\6\4\2\0\2\4\3\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\16\4\1\263"+
    "\10\4\2\0\2\4\3\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\264\26\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\16\4\1\265\10\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\7\4\1\266\17\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\2\4\1\267\24\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\270\21\4\2\0\2\4\3\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\7\4\1\271\17\4"+
    "\2\0\2\4\3\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\1\272\26\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\273\23\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\274\23\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\16\4\1\275\10\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\11\4\1\276\15\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\277\23\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\300\23\4\2\0\2\4\3\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\12\4\1\301\14\4\2\0"+
    "\2\4\3\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\20\4\1\302\6\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\1\0\3\11\2\1\2\0\4\1"+
    "\1\11\2\1\1\11\41\1\2\0\2\1\1\0\1\1"+
    "\1\0\34\1\1\0\1\1\1\11\4\0\1\1\2\0"+
    "\31\1\1\11\4\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  public _UnrealScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _UnrealScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return TRUE_KEYWORD;
          }
        case 44: break;
        case 40: 
          { return CONTINUE_KEYWORD;
          }
        case 45: break;
        case 25: 
          { return CASE_KEYWORD;
          }
        case 46: break;
        case 4: 
          { return INTEGER_LITERAL;
          }
        case 47: break;
        case 14: 
          { return DOC_COMMENT;
          }
        case 48: break;
        case 22: 
          { return NONE_KEYWORD;
          }
        case 49: break;
        case 9: 
          { return LONG_LITERAL;
          }
        case 50: break;
        case 5: 
          { return CHARACTER_LITERAL;
          }
        case 51: break;
        case 31: 
          { return CLASS_KEYWORD;
          }
        case 52: break;
        case 16: 
          { return NEW_KEYWORD;
          }
        case 53: break;
        case 12: 
          { return IF_KEYWORD;
          }
        case 54: break;
        case 15: 
          { return FOR_KEYWORD;
          }
        case 55: break;
        case 28: 
          { return FLOAT_KEYWORD;
          }
        case 56: break;
        case 7: 
          { return END_OF_LINE_COMMENT;
          }
        case 57: break;
        case 10: 
          { return FLOAT_LITERAL;
          }
        case 58: break;
        case 30: 
          { return BREAK_KEYWORD;
          }
        case 59: break;
        case 34: 
          { return STATIC_KEYWORD;
          }
        case 60: break;
        case 32: 
          { return WHILE_KEYWORD;
          }
        case 61: break;
        case 23: 
          { return VOID_KEYWORD;
          }
        case 62: break;
        case 6: 
          { return STRING_LITERAL;
          }
        case 63: break;
        case 43: 
          { return PROTECTED_KEYWORD;
          }
        case 64: break;
        case 20: 
          { return ELSE_KEYWORD;
          }
        case 65: break;
        case 41: 
          { return INTERFACE_KEYWORD;
          }
        case 66: break;
        case 24: 
          { return BOOLEAN_KEYWORD;
          }
        case 67: break;
        case 35: 
          { return SWITCH_KEYWORD;
          }
        case 68: break;
        case 11: 
          { return DOUBLE_LITERAL;
          }
        case 69: break;
        case 8: 
          { return C_STYLE_COMMENT;
          }
        case 70: break;
        case 37: 
          { return PUBLIC_KEYWORD;
          }
        case 71: break;
        case 21: 
          { return SAME_KEYWORD;
          }
        case 72: break;
        case 27: 
          { return FALSE_KEYWORD;
          }
        case 73: break;
        case 17: 
          { return VAR_KEYWORD;
          }
        case 74: break;
        case 39: 
          { return PRIVATE_KEYWORD;
          }
        case 75: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 76: break;
        case 18: 
          { return INT_KEYWORD;
          }
        case 77: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 78: break;
        case 42: 
          { return DEPENDSON_KEYWORD;
          }
        case 79: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 80: break;
        case 33: 
          { return RETURN_KEYWORD;
          }
        case 81: break;
        case 38: 
          { return EXTENDS_KEYWORD;
          }
        case 82: break;
        case 13: 
          { return DO_KEYWORD;
          }
        case 83: break;
        case 36: 
          { return NATIVE_KEYWORD;
          }
        case 84: break;
        case 26: 
          { return GOTO_KEYWORD;
          }
        case 85: break;
        case 29: 
          { return SUPER_KEYWORD;
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
