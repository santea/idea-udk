package com.octopussy.udkplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

%%

%class _UnrealScriptLexer
%implements FlexLexer, TokenType, UnrealScriptTokens
%unicode
%public

%function advance
%type IElementType

WHITE_SPACE_CHAR=[\ \n\r\t\f]

IDENTIFIER=[:jletter:] [:jletterdigit:]*

C_STYLE_COMMENT=("/*"[^"*"]{COMMENT_TAIL})|"/*"
DOC_COMMENT="/*""*"+("/"|([^"/""*"]{COMMENT_TAIL}))?
COMMENT_TAIL=([^"*"]*("*"+[^"*""/"])?)*("*"+"/")?
END_OF_LINE_COMMENT="/""/"[^\r\n]*

DIGIT=[0-9]
DIGIT_OR_UNDERSCORE=[_0-9]
OCTAL_DIGIT=[0-7]
OCTAL_DIGIT_OR_UNDERSCORE=[_0-7]
HEX_DIGIT=[0-9A-Fa-f]
HEX_DIGIT_OR_UNDERSCORE=[_0-9A-Fa-f]
BINARY_DIGIT=[01]
BINARY_DIGIT_OR_UNDERSCORE=[_01]

DIGITS={DIGIT}|({DIGIT}{DIGIT_OR_UNDERSCORE}*{DIGIT})
HEX_DIGITS={HEX_DIGIT}|({HEX_DIGIT}{HEX_DIGIT_OR_UNDERSCORE}*{HEX_DIGIT})
BINARY_DIGITS={BINARY_DIGIT}|({BINARY_DIGIT}{BINARY_DIGIT_OR_UNDERSCORE}*{BINARY_DIGIT})

INTEGER_LITERAL={DECIMAL_INTEGER_LITERAL}|{OCTAL_INTEGER_LITERAL}|{HEX_INTEGER_LITERAL}|{BINARY_INTEGER_LITERAL}
DECIMAL_INTEGER_LITERAL=0|([1-9]({DIGIT_OR_UNDERSCORE}*{DIGIT})?)
OCTAL_INTEGER_LITERAL=0{OCTAL_DIGIT_OR_UNDERSCORE}*{OCTAL_DIGIT}
HEX_INTEGER_LITERAL=0[Xx]{HEX_DIGITS}?
BINARY_INTEGER_LITERAL=0[Bb]{BINARY_DIGITS}?
LONG_LITERAL={INTEGER_LITERAL}[Ll]

FLOAT_LITERAL=({FLOATING_POINT_LITERAL1}|{FLOATING_POINT_LITERAL2}|{FLOATING_POINT_LITERAL3}|{FLOATING_POINT_LITERAL4})[Ff]
DOUBLE_LITERAL=(({FLOATING_POINT_LITERAL1}|{FLOATING_POINT_LITERAL2}|{FLOATING_POINT_LITERAL3})[Dd]?)|({FLOATING_POINT_LITERAL4}[Dd])
FLOATING_POINT_LITERAL1={DIGITS}"."{DIGITS}?{EXPONENT_PART}?
FLOATING_POINT_LITERAL2="."{DIGITS}{EXPONENT_PART}?
FLOATING_POINT_LITERAL3={DIGITS}{EXPONENT_PART}
FLOATING_POINT_LITERAL4={DIGITS}
EXPONENT_PART=[Ee]["+""-"]?{DIGITS}?

HEX_FLOAT_LITERAL={HEX_SIGNIFICAND}{BINARY_EXPONENT}[Ff]
HEX_DOUBLE_LITERAL={HEX_SIGNIFICAND}{BINARY_EXPONENT}[Dd]?
BINARY_EXPONENT=[Pp][+-]?{DIGITS}
HEX_SIGNIFICAND={HEX_INTEGER_LITERAL}|{HEX_INTEGER_LITERAL}.|0[Xx]{HEX_DIGITS}?.{HEX_DIGITS}

CHARACTER_LITERAL="'"([^\\\'\r\n]|{ESCAPE_SEQUENCE})*("'"|\\)?
STRING_LITERAL=\"([^\\\"\r\n]|{ESCAPE_SEQUENCE})*(\"|\\)?
ESCAPE_SEQUENCE=\\[^\r\n]

%%

<YYINITIAL> {WHITE_SPACE_CHAR}+ { return WHITE_SPACE; }

<YYINITIAL> {C_STYLE_COMMENT} { return C_STYLE_COMMENT; }
<YYINITIAL> {END_OF_LINE_COMMENT} { return END_OF_LINE_COMMENT; }
<YYINITIAL> {DOC_COMMENT} { return DOC_COMMENT; }

<YYINITIAL> {LONG_LITERAL} { return LONG_LITERAL; }
<YYINITIAL> {INTEGER_LITERAL} { return INTEGER_LITERAL; }
<YYINITIAL> {FLOAT_LITERAL} { return FLOAT_LITERAL; }
<YYINITIAL> {HEX_FLOAT_LITERAL} { return FLOAT_LITERAL; }
<YYINITIAL> {DOUBLE_LITERAL} { return DOUBLE_LITERAL; }
<YYINITIAL> {HEX_DOUBLE_LITERAL} { return DOUBLE_LITERAL; }

<YYINITIAL> {CHARACTER_LITERAL} { return CHARACTER_LITERAL; }
<YYINITIAL> {STRING_LITERAL} { return STRING_LITERAL; }

<YYINITIAL> "true" { return TRUE_KEYWORD; }
<YYINITIAL> "false" { return FALSE_KEYWORD; }
<YYINITIAL> "None" { return NONE_KEYWORD; }
<YYINITIAL> "var" { return VAR_KEYWORD; }

<YYINITIAL> "bool" { return BOOLEAN_KEYWORD; }
<YYINITIAL> "break" { return BREAK_KEYWORD; }
<YYINITIAL> "case" { return CASE_KEYWORD; }
<YYINITIAL> "class" { return CLASS_KEYWORD; }
<YYINITIAL> "continue" { return CONTINUE_KEYWORD; }
<YYINITIAL> "do" { return DO_KEYWORD; }
<YYINITIAL> "else" { return ELSE_KEYWORD; }
<YYINITIAL> "float" { return FLOAT_KEYWORD; }
<YYINITIAL> "for" { return FOR_KEYWORD; }
<YYINITIAL> "goto" { return GOTO_KEYWORD; }
<YYINITIAL> "if" { return IF_KEYWORD; }
<YYINITIAL> "int" { return INT_KEYWORD; }
<YYINITIAL> "native" { return NATIVE_KEYWORD; }
<YYINITIAL> "new" { return NEW_KEYWORD; }
<YYINITIAL> "private" { return PRIVATE_KEYWORD; }
<YYINITIAL> "interface" { return INTERFACE_KEYWORD; }
<YYINITIAL> "public" { return PUBLIC_KEYWORD; }
<YYINITIAL> "super" { return SUPER_KEYWORD; }
<YYINITIAL> "switch" { return SWITCH_KEYWORD; }
<YYINITIAL> "same" { return SAME_KEYWORD; }
<YYINITIAL> "protected" { return PROTECTED_KEYWORD; }
<YYINITIAL> "return" { return RETURN_KEYWORD; }
<YYINITIAL> "void" { return VOID_KEYWORD; }
<YYINITIAL> "static" { return STATIC_KEYWORD; }
<YYINITIAL> "while" { return WHILE_KEYWORD; }
<YYINITIAL> "extends" { return EXTENDS_KEYWORD; }
<YYINITIAL> "dependson" { return DEPENDSON_KEYWORD; }

<YYINITIAL> {IDENTIFIER} { return IDENTIFIER; }
   /*
<YYINITIAL> "==" { return EQEQ; }
<YYINITIAL> "!=" { return NE; }
<YYINITIAL> "||" { return OROR; }
<YYINITIAL> "++" { return PLUSPLUS; }
<YYINITIAL> "--" { return MINUSMINUS; }

<YYINITIAL> "<" { return LT; }
<YYINITIAL> "<=" { return LE; }
<YYINITIAL> "<<=" { return LTLTEQ; }
<YYINITIAL> "<<" { return LTLT; }
<YYINITIAL> ">" { return GT; }
<YYINITIAL> "&" { return AND; }
<YYINITIAL> "&&" { return ANDAND; }

<YYINITIAL> "+=" { return PLUSEQ; }
<YYINITIAL> "-=" { return MINUSEQ; }
<YYINITIAL> "*=" { return ASTERISKEQ; }
<YYINITIAL> "/=" { return DIVEQ; }
<YYINITIAL> "&=" { return ANDEQ; }
<YYINITIAL> "|=" { return OREQ; }
<YYINITIAL> "^=" { return XOREQ; }
<YYINITIAL> "%=" { return PERCEQ; }

<YYINITIAL> "("   { return LPARENTH; }
<YYINITIAL> ")"   { return RPARENTH; }
<YYINITIAL> "{"   { return LBRACE; }
<YYINITIAL> "}"   { return RBRACE; }
<YYINITIAL> "["   { return LBRACKET; }
<YYINITIAL> "]"   { return RBRACKET; }
<YYINITIAL> ";"   { return SEMICOLON; }
<YYINITIAL> ","   { return COMMA; }
<YYINITIAL> "..." { return ELLIPSIS; }
<YYINITIAL> "."   { return DOT; }

<YYINITIAL> "=" { return EQ; }
<YYINITIAL> "!" { return EXCL; }
<YYINITIAL> "~" { return TILDE; }
<YYINITIAL> "?" { return QUEST; }
<YYINITIAL> ":" { return COLON; }
<YYINITIAL> "+" { return PLUS; }
<YYINITIAL> "-" { return MINUS; }
<YYINITIAL> "*" { return ASTERISK; }
<YYINITIAL> "/" { return DIV; }
<YYINITIAL> "|" { return OR; }
<YYINITIAL> "^" { return XOR; }
<YYINITIAL> "%" { return PERC; }
<YYINITIAL> "@" { return AT; }
                                       */
<YYINITIAL> . { return BAD_CHARACTER; }