/* The following code was generated by JFlex 1.4.3 on 13.05.12 23:23 */

package org.octopussy.udkplugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import org.octopussy.udkplugin.lang.UnrealTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13.05.12 23:23 from the specification file
 * <tt>E:/dev/idea-udk/udk-plugin-main/src/org/octopussy/udkplugin/lang/lexer/unrealscript.flex</tt>
 */
public class _UnrealLexer implements FlexLexer, UnrealTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\6\1\0\1\1\1\6\16\3\4\0\1\1\1\0"+
    "\1\16\1\0\1\2\2\0\1\0\1\20\1\21\1\5\1\0\1\22"+
    "\1\0\1\0\1\4\1\3\11\3\1\0\1\17\5\0\1\32\1\7"+
    "\1\30\1\12\1\13\1\11\1\41\1\43\1\25\2\2\1\31\1\42"+
    "\1\35\1\26\1\14\1\2\1\27\1\33\1\34\1\36\1\37\1\2"+
    "\1\10\1\40\1\2\1\0\1\15\2\0\1\2\1\0\1\32\1\7"+
    "\1\30\1\12\1\13\1\11\1\41\1\43\1\25\2\2\1\31\1\42"+
    "\1\35\1\26\1\14\1\2\1\27\1\33\1\34\1\36\1\37\1\2"+
    "\1\10\1\40\1\2\1\23\1\0\1\24\1\0\41\3\2\0\4\2"+
    "\4\0\1\2\2\0\1\3\7\0\1\2\4\0\1\2\5\0\27\2"+
    "\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2\16\0\5\2"+
    "\11\0\1\2\21\0\130\3\5\0\23\3\12\0\1\2\13\0\1\2"+
    "\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2"+
    "\1\0\5\2\4\0\202\2\1\0\4\3\3\0\105\2\1\0\46\2"+
    "\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2"+
    "\11\0\21\3\1\0\27\3\1\0\3\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\13\0\33\2\5\0\3\2\15\0\4\3\14\0\6\3"+
    "\13\0\32\2\5\0\13\2\16\3\7\0\12\3\4\0\2\2\1\3"+
    "\143\2\1\0\1\2\10\3\1\0\6\3\2\2\2\3\1\0\4\3"+
    "\2\2\12\3\3\2\2\0\1\2\17\0\1\3\1\2\1\3\36\2"+
    "\33\3\2\0\3\2\60\0\46\2\13\3\1\2\u014f\0\3\3\66\2"+
    "\2\0\1\3\1\2\20\3\2\0\1\2\4\3\3\0\12\2\2\3"+
    "\2\0\12\3\21\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\3\1\2\7\3"+
    "\2\0\2\3\2\0\3\3\11\0\1\3\4\0\2\2\1\0\3\2"+
    "\2\3\2\0\12\3\4\2\15\0\3\3\1\0\6\2\4\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2"+
    "\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\13\0\4\2"+
    "\1\0\1\2\7\0\14\3\3\2\14\0\3\3\1\0\11\2\1\0"+
    "\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\2\0"+
    "\1\3\1\2\10\3\1\0\3\3\1\0\3\3\2\0\1\2\17\0"+
    "\2\2\2\3\2\0\12\3\1\0\1\2\17\0\3\3\1\0\10\2"+
    "\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\2\0\1\3\1\2\6\3\3\0\2\3\2\0\3\3\10\0\2\3"+
    "\4\0\2\2\1\0\3\2\4\0\12\3\1\0\1\2\20\0\1\3"+
    "\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0"+
    "\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0"+
    "\3\2\4\0\5\3\3\0\3\3\1\0\4\3\11\0\1\3\17\0"+
    "\11\3\11\0\1\2\7\0\3\3\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\4\0\7\3\1\0\3\3\1\0"+
    "\4\3\7\0\2\3\11\0\2\2\4\0\12\3\22\0\2\3\1\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0"+
    "\1\3\1\2\7\3\1\0\3\3\1\0\4\3\7\0\2\3\7\0"+
    "\1\2\1\0\2\2\4\0\12\3\22\0\2\3\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\20\2\4\0\6\3\2\0\3\3\1\0"+
    "\4\3\11\0\1\3\10\0\2\2\4\0\12\3\22\0\2\3\1\0"+
    "\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2\3\0"+
    "\1\3\4\0\6\3\1\0\1\3\1\0\10\3\22\0\2\3\15\0"+
    "\60\2\1\3\2\2\7\3\4\0\10\2\10\3\1\0\12\3\47\0"+
    "\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0"+
    "\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0"+
    "\2\2\1\0\4\2\1\3\2\2\6\3\1\0\2\3\1\2\2\0"+
    "\5\2\1\0\1\2\1\0\6\3\2\0\12\3\2\0\2\2\42\0"+
    "\1\2\27\0\2\3\6\0\12\3\13\0\1\3\1\0\1\3\1\0"+
    "\1\3\4\0\2\3\10\2\1\0\42\2\6\0\24\3\1\0\2\3"+
    "\4\2\4\0\10\3\1\0\44\3\11\0\1\3\71\0\42\2\1\0"+
    "\5\2\1\0\2\2\1\0\7\3\3\0\4\3\6\0\12\3\6\0"+
    "\6\2\4\3\106\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2"+
    "\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2"+
    "\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2"+
    "\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2"+
    "\1\0\23\2\16\0\11\3\56\0\125\2\14\0\u026c\2\2\0\10\2"+
    "\12\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0\4\2"+
    "\3\3\13\0\22\2\3\3\13\0\22\2\2\3\14\0\15\2\1\0"+
    "\3\2\1\0\2\3\14\0\64\2\40\3\3\0\1\2\3\0\2\2"+
    "\1\3\2\0\12\3\41\0\3\3\2\0\12\3\6\0\130\2\10\0"+
    "\51\2\1\3\126\0\35\2\3\0\14\3\4\0\14\3\12\0\12\3"+
    "\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0"+
    "\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0"+
    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\4\0\15\2\5\0\3\2\1\0\7\2\17\0\4\3\32\0"+
    "\5\3\20\0\2\2\23\0\1\2\13\0\4\3\6\0\6\3\1\0"+
    "\1\2\15\0\1\2\40\0\22\2\36\0\15\3\4\0\1\3\3\0"+
    "\6\3\27\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0"+
    "\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0"+
    "\3\2\1\0\7\2\3\0\3\2\5\0\5\2\26\0\44\2\u0e81\0"+
    "\3\2\31\0\11\2\6\3\1\0\5\2\2\0\5\2\4\0\126\2"+
    "\2\0\2\3\2\0\3\2\1\0\137\2\5\0\50\2\4\0\136\2"+
    "\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2"+
    "\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\3\12\2\1\0\15\2\1\0\5\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2"+
    "\2\0\66\2\50\0\15\2\3\0\20\3\20\0\4\3\17\0\2\2"+
    "\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2\2\0\1\3"+
    "\4\0\1\2\13\0\12\3\7\0\32\2\4\0\1\2\1\0\32\2"+
    "\12\0\132\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\3\0\2\2\3\0\2\2\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\4\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\13\3\1\13\1\14"+
    "\14\3\2\4\1\15\22\3\1\14\1\16\3\3\1\17"+
    "\15\3\1\20\2\3\1\21\20\3\1\22\2\3\1\0"+
    "\2\16\1\23\1\24\41\3\1\25\1\26\1\3\1\14"+
    "\1\0\1\27\1\30\4\3\1\31\6\3\1\32\4\3"+
    "\1\33\1\34\1\35\16\3\1\36\12\3\1\37\1\40"+
    "\1\41\4\3\1\42\1\43\1\3\1\44\2\3\1\45"+
    "\2\3\1\46\3\3\1\47\16\3\1\50\5\3\1\51"+
    "\1\52\1\53\1\54\1\3\1\55\2\3\1\56\3\3"+
    "\1\57\2\3\1\60\1\61\1\62\1\63\1\64\11\3"+
    "\1\65\3\3\1\66\1\67\1\3\1\70\4\3\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\44\0\44\0\44\0\44\0\44\0\44"+
    "\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c\0\u0240\0\u0264"+
    "\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384"+
    "\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4"+
    "\0\u04c8\0\u04ec\0\44\0\154\0\u0510\0\u0534\0\u0558\0\u057c"+
    "\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c"+
    "\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc"+
    "\0\u07e0\0\u0804\0\u0828\0\154\0\u084c\0\u0870\0\u0894\0\u08b8"+
    "\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8"+
    "\0\u09fc\0\154\0\u0a20\0\u0a44\0\154\0\u0a68\0\u0a8c\0\u0ab0"+
    "\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0"+
    "\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\154\0\u0ca8\0\u0ccc"+
    "\0\u0cf0\0\u0d14\0\44\0\154\0\154\0\u0d38\0\u0d5c\0\u0d80"+
    "\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0"+
    "\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0"+
    "\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0"+
    "\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8\0\154\0\154"+
    "\0\u11dc\0\44\0\u1200\0\154\0\154\0\u1224\0\u1248\0\u126c"+
    "\0\u1290\0\154\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\154\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\154\0\154\0\154"+
    "\0\u141c\0\u1440\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518"+
    "\0\u153c\0\u1560\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\154\0\u1614"+
    "\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734"+
    "\0\u1758\0\154\0\154\0\154\0\u177c\0\u17a0\0\u17c4\0\u17e8"+
    "\0\154\0\154\0\u180c\0\154\0\u1830\0\u1854\0\u1878\0\u189c"+
    "\0\u18c0\0\154\0\u18e4\0\u1908\0\u192c\0\154\0\u1950\0\u1974"+
    "\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94"+
    "\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\154\0\u1b48\0\u1b6c\0\u1b90"+
    "\0\u1bb4\0\u1bd8\0\154\0\154\0\154\0\154\0\u1bfc\0\154"+
    "\0\u1c20\0\u1c44\0\154\0\u1c68\0\u1c8c\0\u1cb0\0\154\0\u1cd4"+
    "\0\u1cf8\0\154\0\154\0\154\0\154\0\154\0\u1d1c\0\u1d40"+
    "\0\u1d64\0\u1d88\0\u1dac\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\154"+
    "\0\u1e60\0\u1e84\0\u1ea8\0\154\0\154\0\u1ecc\0\154\0\u1ef0"+
    "\0\u1f14\0\u1f38\0\u1f5c\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\3\1\6"+
    "\1\4\1\7\1\4\1\10\1\11\1\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\4"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\4\1\31"+
    "\1\4\1\32\1\4\1\33\45\0\1\3\4\0\1\3"+
    "\37\0\2\4\3\0\6\4\10\0\17\4\4\0\1\34"+
    "\1\35\40\0\2\4\3\0\6\4\10\0\1\4\1\36"+
    "\11\4\1\37\3\4\2\0\2\4\3\0\6\4\10\0"+
    "\1\40\1\41\2\4\1\42\4\4\1\43\5\4\2\0"+
    "\2\4\3\0\1\4\1\44\1\4\1\45\2\4\10\0"+
    "\12\4\1\46\4\4\2\0\2\4\3\0\6\4\10\0"+
    "\1\4\1\47\1\50\1\4\1\51\12\4\6\12\1\0"+
    "\6\12\1\52\1\53\25\12\2\0\2\4\3\0\2\4"+
    "\1\54\3\4\10\0\7\4\1\55\1\56\6\4\2\0"+
    "\2\4\3\0\5\4\1\57\10\0\11\4\1\60\5\4"+
    "\2\0\2\4\3\0\6\4\10\0\1\4\1\61\2\4"+
    "\1\62\12\4\2\0\2\4\3\0\6\4\10\0\1\4"+
    "\1\63\3\4\1\64\11\4\2\0\2\4\3\0\1\65"+
    "\5\4\10\0\2\4\1\66\14\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\67\6\4\1\70\7\4\2\0\2\4"+
    "\3\0\6\4\10\0\2\4\1\71\14\4\2\0\2\4"+
    "\3\0\6\4\10\0\1\4\1\72\3\4\1\73\11\4"+
    "\2\0\2\4\3\0\6\4\10\0\5\4\1\74\11\4"+
    "\2\0\2\4\3\0\6\4\10\0\11\4\1\75\5\4"+
    "\2\0\2\4\3\0\6\4\10\0\1\76\16\4\6\34"+
    "\1\0\35\34\5\77\1\100\36\77\2\0\2\4\3\0"+
    "\6\4\10\0\1\4\1\101\15\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\102\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\10\4\1\103\6\4\2\0\2\4\3\0"+
    "\6\4\10\0\2\4\1\104\14\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\4\1\105\15\4\2\0\2\4\3\0"+
    "\6\4\10\0\10\4\1\106\6\4\2\0\2\4\3\0"+
    "\5\4\1\107\10\0\7\4\1\110\7\4\2\0\2\4"+
    "\3\0\6\4\10\0\1\111\16\4\2\0\2\4\3\0"+
    "\4\4\1\112\1\4\10\0\17\4\2\0\2\4\3\0"+
    "\6\4\10\0\6\4\1\113\10\4\2\0\2\4\3\0"+
    "\4\4\1\114\1\4\10\0\1\115\1\116\15\4\2\0"+
    "\2\4\3\0\6\4\10\0\5\4\1\117\11\4\6\12"+
    "\1\0\35\12\2\0\2\4\3\0\4\4\1\120\1\4"+
    "\10\0\17\4\2\0\2\4\3\0\5\4\1\121\10\0"+
    "\7\4\1\122\7\4\2\0\2\4\3\0\4\4\1\123"+
    "\1\4\10\0\7\4\1\124\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\125\7\4\2\0\2\4\3\0"+
    "\4\4\1\126\1\4\10\0\10\4\1\127\6\4\2\0"+
    "\2\4\3\0\6\4\10\0\5\4\1\130\11\4\2\0"+
    "\2\4\3\0\6\4\10\0\3\4\1\131\13\4\2\0"+
    "\2\4\3\0\6\4\10\0\7\4\1\132\7\4\2\0"+
    "\2\4\3\0\6\4\10\0\6\4\1\133\10\4\2\0"+
    "\2\4\3\0\6\4\10\0\3\4\1\134\13\4\2\0"+
    "\2\4\3\0\6\4\10\0\10\4\1\135\4\4\1\136"+
    "\1\4\2\0\2\4\3\0\6\4\10\0\2\4\1\137"+
    "\2\4\1\140\11\4\2\0\2\4\3\0\6\4\10\0"+
    "\5\4\1\141\11\4\2\0\2\4\3\0\4\4\1\142"+
    "\1\4\10\0\7\4\1\143\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\144\5\4\1\145\1\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\146\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\1\147\16\4\2\0\2\4"+
    "\3\0\3\4\1\150\2\4\10\0\17\4\5\77\1\151"+
    "\36\77\4\152\1\153\1\100\36\152\2\0\2\4\3\0"+
    "\6\4\10\0\4\4\1\154\12\4\2\0\2\4\3\0"+
    "\4\4\1\155\1\4\10\0\17\4\2\0\2\4\3\0"+
    "\6\4\10\0\5\4\1\156\11\4\2\0\2\4\3\0"+
    "\6\4\10\0\5\4\1\157\11\4\2\0\2\4\3\0"+
    "\6\4\10\0\3\4\1\160\13\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\4\1\161\15\4\2\0\2\4\3\0"+
    "\4\4\1\162\1\4\10\0\17\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\163\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\10\4\1\164\6\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\165\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\4\1\166\15\4\2\0\2\4\3\0"+
    "\6\4\10\0\12\4\1\167\4\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\170\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\3\4\1\171\13\4\2\0\2\4\3\0"+
    "\6\4\10\0\2\4\1\172\14\4\2\0\2\4\3\0"+
    "\6\4\10\0\11\4\1\173\5\4\2\0\2\4\3\0"+
    "\6\4\10\0\2\4\1\174\14\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\175\16\4\2\0\2\4\3\0\6\4"+
    "\10\0\2\4\1\176\14\4\2\0\2\4\3\0\2\4"+
    "\1\177\3\4\10\0\6\4\1\200\10\4\2\0\2\4"+
    "\3\0\6\4\10\0\6\4\1\201\10\4\2\0\2\4"+
    "\3\0\6\4\10\0\5\4\1\202\11\4\2\0\2\4"+
    "\3\0\4\4\1\203\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\6\4\10\0\7\4\1\204\7\4\2\0\2\4"+
    "\3\0\6\4\10\0\16\4\1\205\2\0\2\4\3\0"+
    "\6\4\10\0\14\4\1\206\2\4\2\0\2\4\3\0"+
    "\6\4\10\0\11\4\1\207\5\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\210\16\4\2\0\2\4\3\0\6\4"+
    "\10\0\7\4\1\211\7\4\2\0\2\4\3\0\6\4"+
    "\10\0\10\4\1\212\1\4\1\213\4\4\2\0\2\4"+
    "\3\0\1\4\1\214\4\4\10\0\17\4\2\0\2\4"+
    "\3\0\5\4\1\215\10\0\17\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\216\16\4\2\0\2\4\3\0\4\4"+
    "\1\217\1\4\10\0\17\4\2\0\2\4\3\0\3\4"+
    "\1\220\2\4\10\0\17\4\2\0\2\4\3\0\4\4"+
    "\1\221\1\4\10\0\17\4\4\77\1\222\1\151\36\77"+
    "\5\152\1\223\36\152\2\0\2\4\3\0\6\4\10\0"+
    "\4\4\1\224\12\4\2\0\2\4\3\0\6\4\10\0"+
    "\7\4\1\225\7\4\2\0\2\4\3\0\6\4\10\0"+
    "\7\4\1\226\7\4\2\0\2\4\3\0\6\4\10\0"+
    "\2\4\1\227\14\4\2\0\2\4\3\0\6\4\10\0"+
    "\10\4\1\230\6\4\2\0\2\4\3\0\6\4\10\0"+
    "\3\4\1\231\13\4\2\0\2\4\3\0\6\4\10\0"+
    "\7\4\1\232\7\4\2\0\2\4\3\0\6\4\10\0"+
    "\1\4\1\233\15\4\2\0\2\4\3\0\5\4\1\234"+
    "\10\0\17\4\2\0\2\4\3\0\6\4\10\0\5\4"+
    "\1\235\11\4\2\0\2\4\3\0\4\4\1\236\1\4"+
    "\10\0\17\4\2\0\2\4\3\0\4\4\1\237\1\4"+
    "\10\0\17\4\2\0\2\4\3\0\6\4\10\0\5\4"+
    "\1\240\11\4\2\0\2\4\3\0\6\4\10\0\7\4"+
    "\1\241\7\4\2\0\2\4\3\0\6\4\10\0\5\4"+
    "\1\242\11\4\2\0\2\4\3\0\6\4\10\0\1\4"+
    "\1\243\15\4\2\0\2\4\3\0\6\4\10\0\3\4"+
    "\1\244\13\4\2\0\2\4\3\0\6\4\10\0\1\245"+
    "\16\4\2\0\2\4\3\0\6\4\10\0\7\4\1\246"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\6\4\1\247"+
    "\10\4\2\0\2\4\3\0\6\4\10\0\4\4\1\250"+
    "\12\4\2\0\2\4\3\0\6\4\10\0\10\4\1\251"+
    "\6\4\2\0\2\4\3\0\6\4\10\0\2\4\1\252"+
    "\14\4\2\0\2\4\3\0\4\4\1\253\1\4\10\0"+
    "\17\4\2\0\2\4\3\0\6\4\10\0\11\4\1\254"+
    "\5\4\2\0\2\4\3\0\6\4\10\0\4\4\1\255"+
    "\12\4\2\0\2\4\3\0\6\4\10\0\10\4\1\256"+
    "\6\4\2\0\2\4\3\0\6\4\10\0\1\257\16\4"+
    "\2\0\2\4\3\0\6\4\10\0\6\4\1\260\10\4"+
    "\2\0\2\4\3\0\4\4\1\261\1\4\10\0\17\4"+
    "\2\0\2\4\3\0\5\4\1\262\10\0\17\4\2\0"+
    "\2\4\3\0\6\4\10\0\4\4\1\263\12\4\2\0"+
    "\2\4\3\0\6\4\10\0\12\4\1\264\4\4\2\0"+
    "\2\4\3\0\6\4\10\0\3\4\1\265\13\4\4\152"+
    "\1\153\1\223\36\152\2\0\2\4\3\0\6\4\10\0"+
    "\1\266\16\4\2\0\2\4\3\0\6\4\10\0\7\4"+
    "\1\267\7\4\2\0\2\4\3\0\3\4\1\270\2\4"+
    "\10\0\17\4\2\0\2\4\3\0\6\4\10\0\1\4"+
    "\1\271\15\4\2\0\2\4\3\0\5\4\1\272\10\0"+
    "\17\4\2\0\2\4\3\0\4\4\1\273\1\4\10\0"+
    "\17\4\2\0\2\4\3\0\6\4\10\0\7\4\1\274"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\3\4\1\275"+
    "\13\4\2\0\2\4\3\0\6\4\10\0\5\4\1\276"+
    "\11\4\2\0\2\4\3\0\6\4\10\0\7\4\1\277"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\7\4\1\300"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\10\4\1\301"+
    "\6\4\2\0\2\4\3\0\4\4\1\302\1\4\10\0"+
    "\17\4\2\0\2\4\3\0\6\4\10\0\14\4\1\303"+
    "\2\4\2\0\2\4\3\0\6\4\10\0\7\4\1\304"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\5\4\1\305"+
    "\11\4\2\0\2\4\3\0\6\4\10\0\7\4\1\306"+
    "\7\4\2\0\2\4\3\0\6\4\10\0\4\4\1\307"+
    "\12\4\2\0\2\4\3\0\6\4\10\0\5\4\1\310"+
    "\11\4\2\0\2\4\3\0\6\4\10\0\14\4\1\311"+
    "\2\4\2\0\2\4\3\0\6\4\10\0\3\4\1\312"+
    "\13\4\2\0\2\4\3\0\6\4\10\0\1\313\16\4"+
    "\2\0\2\4\3\0\6\4\10\0\4\4\1\314\12\4"+
    "\2\0\2\4\3\0\6\4\10\0\1\4\1\315\15\4"+
    "\2\0\2\4\3\0\6\4\10\0\5\4\1\316\11\4"+
    "\2\0\2\4\3\0\4\4\1\317\1\4\10\0\17\4"+
    "\2\0\2\4\3\0\6\4\10\0\5\4\1\320\11\4"+
    "\2\0\2\4\3\0\6\4\10\0\1\4\1\321\15\4"+
    "\2\0\2\4\3\0\6\4\10\0\6\4\1\322\10\4"+
    "\2\0\2\4\3\0\6\4\10\0\10\4\1\323\6\4"+
    "\2\0\2\4\3\0\4\4\1\324\1\4\10\0\17\4"+
    "\2\0\2\4\3\0\6\4\10\0\2\4\1\325\14\4"+
    "\2\0\2\4\3\0\4\4\1\326\1\4\10\0\17\4"+
    "\2\0\2\4\3\0\6\4\10\0\7\4\1\327\7\4"+
    "\2\0\2\4\3\0\1\330\5\4\10\0\17\4\2\0"+
    "\2\4\3\0\6\4\10\0\1\4\1\331\15\4\2\0"+
    "\2\4\3\0\6\4\10\0\1\4\1\332\15\4\2\0"+
    "\2\4\3\0\6\4\10\0\5\4\1\333\11\4\2\0"+
    "\2\4\3\0\6\4\10\0\3\4\1\334\13\4\2\0"+
    "\2\4\3\0\6\4\10\0\13\4\1\335\3\4\2\0"+
    "\2\4\3\0\6\4\10\0\5\4\1\336\11\4\2\0"+
    "\2\4\3\0\6\4\10\0\7\4\1\337\7\4\2\0"+
    "\2\4\3\0\4\4\1\340\1\4\10\0\17\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\341\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\3\4\1\342\13\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\343\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\7\4\1\344\7\4\2\0"+
    "\2\4\3\0\6\4\10\0\10\4\1\345\6\4\2\0"+
    "\2\4\3\0\6\4\10\0\6\4\1\346\10\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\347\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\5\4\1\350\11\4\2\0"+
    "\2\4\3\0\4\4\1\351\1\4\10\0\17\4\2\0"+
    "\2\4\3\0\6\4\10\0\4\4\1\352\12\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\353\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\2\4\1\354\14\4\2\0"+
    "\2\4\3\0\6\4\10\0\4\4\1\355\12\4\2\0"+
    "\2\4\3\0\6\4\10\0\7\4\1\356\7\4\2\0"+
    "\2\4\3\0\5\4\1\357\10\0\17\4\2\0\2\4"+
    "\3\0\6\4\10\0\2\4\1\360\14\4\2\0\2\4"+
    "\3\0\4\4\1\361\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\6\4\10\0\10\4\1\362\6\4\2\0\2\4"+
    "\3\0\6\4\10\0\7\4\1\363\7\4\2\0\2\4"+
    "\3\0\4\4\1\364\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\4\4\1\365\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\4\4\1\366\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\6\4\10\0\7\4\1\367\7\4\2\0\2\4"+
    "\3\0\6\4\10\0\5\4\1\370\11\4\2\0\2\4"+
    "\3\0\6\4\10\0\7\4\1\371\7\4\2\0\2\4"+
    "\3\0\3\4\1\372\2\4\10\0\17\4\2\0\2\4"+
    "\3\0\4\4\1\373\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\4\4\1\374\1\4\10\0\17\4\2\0\2\4"+
    "\3\0\3\4\1\375\2\4\10\0\17\4\2\0\2\4"+
    "\3\0\6\4\10\0\7\4\1\376\7\4\2\0\2\4"+
    "\3\0\6\4\10\0\5\4\1\377\11\4\2\0\2\4"+
    "\3\0\5\4\1\u0100\10\0\17\4\2\0\2\4\3\0"+
    "\6\4\10\0\14\4\1\u0101\2\4\2\0\2\4\3\0"+
    "\6\4\10\0\7\4\1\u0102\7\4\2\0\2\4\3\0"+
    "\6\4\10\0\1\4\1\u0103\15\4\2\0\2\4\3\0"+
    "\1\u0104\5\4\10\0\17\4\2\0\2\4\3\0\6\4"+
    "\10\0\4\4\1\u0105\12\4\2\0\2\4\3\0\6\4"+
    "\10\0\1\4\1\u0106\15\4\2\0\2\4\3\0\6\4"+
    "\10\0\1\4\1\u0107\15\4\2\0\2\4\3\0\6\4"+
    "\10\0\2\4\1\u0108\14\4\2\0\2\4\3\0\6\4"+
    "\10\0\4\4\1\u0109\12\4\2\0\2\4\3\0\6\4"+
    "\10\0\1\u010a\16\4\2\0\2\4\3\0\6\4\10\0"+
    "\2\4\1\u010b\14\4\2\0\2\4\3\0\6\4\10\0"+
    "\2\4\1\u010c\14\4\2\0\2\4\3\0\4\4\1\u010d"+
    "\1\4\10\0\17\4\2\0\2\4\3\0\6\4\10\0"+
    "\3\4\1\u010e\13\4\2\0\2\4\3\0\6\4\10\0"+
    "\13\4\1\u010f\3\4\2\0\2\4\3\0\6\4\10\0"+
    "\5\4\1\u0110\11\4\2\0\2\4\3\0\6\4\10\0"+
    "\7\4\1\u0111\7\4\2\0\2\4\3\0\6\4\10\0"+
    "\1\u0112\16\4\2\0\2\4\3\0\6\4\10\0\1\4"+
    "\1\u0113\15\4\2\0\2\4\3\0\6\4\10\0\10\4"+
    "\1\u0114\6\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\6\11\32\1\1\11\75\1\1\0"+
    "\1\1\1\11\46\1\1\11\1\0\201\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _UnrealLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _UnrealLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1794) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return FINAL_KEYWORD;
          }
        case 58: break;
        case 30: 
          { return EXPORT_KEYWORD;
          }
        case 59: break;
        case 49: 
          { return PLACEABLE_KEYWORD;
          }
        case 60: break;
        case 51: 
          { return SIMULATED_KEYWORD;
          }
        case 61: break;
        case 40: 
          { return FUNCTION_KEYWORD;
          }
        case 62: break;
        case 43: 
          { return OPTIONAL_KEYWORD;
          }
        case 63: break;
        case 5: 
          { return SEMICOLON;
          }
        case 64: break;
        case 22: 
          { return GUID_KEYWORD;
          }
        case 65: break;
        case 17: 
          { return OUT_KEYWORD;
          }
        case 66: break;
        case 14: 
          { return DOC_COMMENT;
          }
        case 67: break;
        case 33: 
          { return LATENT_KEYWORD;
          }
        case 68: break;
        case 26: 
          { return INPUT_KEYWORD;
          }
        case 69: break;
        case 21: 
          { return NAME_KEYWORD;
          }
        case 70: break;
        case 28: 
          { return CLASS_KEYWORD;
          }
        case 71: break;
        case 13: 
          { return IF_KEYWORD;
          }
        case 72: break;
        case 42: 
          { return OPERATOR_KEYWORD;
          }
        case 73: break;
        case 9: 
          { return LCURLY;
          }
        case 74: break;
        case 15: 
          { return FOR_KEYWORD;
          }
        case 75: break;
        case 10: 
          { return RCURLY;
          }
        case 76: break;
        case 24: 
          { return FLOAT_KEYWORD;
          }
        case 77: break;
        case 32: 
          { return CONFIG_KEYWORD;
          }
        case 78: break;
        case 8: 
          { return COMMA;
          }
        case 79: break;
        case 41: 
          { return ITERATOR_KEYWORD;
          }
        case 80: break;
        case 53: 
          { return PREOPERATOR_KEYWORD;
          }
        case 81: break;
        case 54: 
          { return POSTOPERATOR_KEYWORD;
          }
        case 82: break;
        case 35: 
          { return STATIC_KEYWORD;
          }
        case 83: break;
        case 34: 
          { return STRING_KEYWORD;
          }
        case 84: break;
        case 4: 
          { return STRING_LITERAL;
          }
        case 85: break;
        case 46: 
          { return NOEXPORT_KEYWORD;
          }
        case 86: break;
        case 48: 
          { return PROTECTED_KEYWORD;
          }
        case 87: break;
        case 31: 
          { return COERCE_KEYWORD;
          }
        case 88: break;
        case 56: 
          { return HIDECATEGORY_KEYWORD;
          }
        case 89: break;
        case 27: 
          { return CONST_KEYWORD;
          }
        case 90: break;
        case 11: 
          { return LINE_COMMENT;
          }
        case 91: break;
        case 50: 
          { return ARCHETYPE_KEYWORD;
          }
        case 92: break;
        case 44: 
          { return ABSTRACT_KEYWORD;
          }
        case 93: break;
        case 12: 
          { return C_STYLE_COMMENT;
          }
        case 94: break;
        case 29: 
          { return LOCAL_KEYWORD;
          }
        case 95: break;
        case 52: 
          { return TRANSIENT_KEYWORD;
          }
        case 96: break;
        case 19: 
          { return BOOL_KEYWORD;
          }
        case 97: break;
        case 57: 
          { return NATIVEREPLICATION_KEYWORD;
          }
        case 98: break;
        case 36: 
          { return TRAVEL_KEYWORD;
          }
        case 99: break;
        case 45: 
          { return SINGULAR_KEYWORD;
          }
        case 100: break;
        case 20: 
          { return BYTE_KEYWORD;
          }
        case 101: break;
        case 18: 
          { return VAR_KEYWORD;
          }
        case 102: break;
        case 39: 
          { return PRIVATE_KEYWORD;
          }
        case 103: break;
        case 6: 
          { return LPAREN;
          }
        case 104: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 105: break;
        case 7: 
          { return RPAREN;
          }
        case 106: break;
        case 16: 
          { return INT_KEYWORD;
          }
        case 107: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 108: break;
        case 25: 
          { return EVENT_KEYWORD;
          }
        case 109: break;
        case 55: 
          { return NOTPLACEABLE_KEYWORD;
          }
        case 110: break;
        case 2: 
          { return WHITE_SPACE;
          }
        case 111: break;
        case 38: 
          { return EXTENDS_KEYWORD;
          }
        case 112: break;
        case 37: 
          { return NATIVE_KEYWORD;
          }
        case 113: break;
        case 47: 
          { return EDITCONST_KEYWORD;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
